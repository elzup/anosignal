[
  "v.product <- c(\"ATW Cal-\", \"BRN Cal-\", \"FEUA MidDec-\")\nv.year <- c(2021, 2022)\nv.all <- c(\"ATW Cal-2021\", \"ATW Cal-2022\", \"BRN Cal-2021\", \"BRN Cal-2022\", \n           \"FEUA MidDec-2021\", \"FEUA MidDec-2022\")",
  "class B() : A {\n    override val p1: String = ...\n    override fun p2() : String { ... }\n}\n\nabstract class A() {\n    abstract val p1: String\n    abstract fun p2() : String\n    fun p3() : String = p1.plus(\"-\").plus(p2())\n    init {\n       var p4 = p3()\n    }\n\n}",
  "SELECT t.created_at, t.id, sum(t1.profit) profit_1_week, sum(t2.profit) profit_2_week, sum(t3.profit) profit_1_day FROM t\nLEFT JOIN t0 t1 ON t.id = t.id AND t1.inport_date BETWEEN t.created_at AND DATE_ADD(t.created_at, INTERVAL 30 DAY)\nLEFT JOIN t0 t2 ON t.id = t.id AND t2.inport_date BETWEEN DATE_ADD(t.created_at, INTERVAL 30 DAY) AND DATE_ADD(t.created_at, INTERVAL 60 DAY)\nLEFT JOIN t0 t3 ON t.id = t.id AND t3.inport_date BETWEEN t.created_at AND DATE_ADD(t.created_at, INTERVAL 1 DAY)\nGROUP BY t.created_at, t.id\nORDER BY t.created_at",
  "#include<vector>\nstruct TYPE {\n    int a, b, g, d;\n    bool bl;\n};\nint main() {\n    std::vector<TYPE> i;\n    std::vector<bool> b;\n\n    TYPE* ii = &i[0]; // can work with int, double, char and something else\n    bool* bb = &b[0]; // compile error\n}",
  "[10/15/2020 05:45:24] Finished running.  Process will return: Success\n[10/15/2020 05:45:24] ====== Revit finished running: revitcoreconsole ======\n[10/15/2020 05:45:25] End Revit Core Engine standard output dump.\n[10/15/2020 05:45:25] End script phase.\n[10/15/2020 05:45:25] Start upload phase.\n[10/15/2020 05:45:25] Error: Non-optional output [result.json] is missing.\n[10/15/2020 05:45:25] Error: An unexpected error happened during phase Publishing of job.\n[10/15/2020 05:45:25] Job finished with result FailedMissingOutput\n[10/15/2020 05:45:25] Job Status:",
  "const cats = [\n      { name: 'Bob', lastName: 'Ross' },\n      { name: 'Frank', lastName: 'Langella' },\n    ];\n    \n    // this bugs me\n    const fullName = cat => add(\n      prop('name', cat),\n      prop('lastName', cat)\n    );\n    \n    const isEqual = curry((a, b) => a === b);\n    const isBobRoss = compose(isEqual('BobRoss'), fullName);\n/**\n *  compose :: ((a -> b), (b -> c),  ..., (y -> z)) -> a -> z\n */\nconst compose = (...fns) => (...args) => \n  fns.reduceRight((res, fn) => [fn.call(null, ...res)], args)[0];\n\n/**\n *  curry :: ((a, b, ...) -> c) -> a -> b -> ... -> c\n */\nfunction curry(fn) {\n  const arity = fn.length;\n\n  return function $curry(...args) {\n    if (args.length < arity) {\n      return $curry.bind(null, ...args);\n    }\n\n    return fn.call(null, ...args);\n  };\n\n/**\n *  add :: a -> b -> a + b\n */\nconst add = curry((x, y) =>  x + y)\n\n/**\n *  prop :: String -> Object -> a\n */\nconst prop = curry((p, obj) => obj[p])\n}",
  "exports.getShip = catchAsync(async (req, res, next) => {\n  const ship = await Ship.findOne({ slug: req.params.slug }).populate({\n    path: 'reviews',\n    fields: 'review rating user displayDate ratingsQuantity',\n  });\n  const reviewCount = await Review.count();\n  const allShips = await Ship.find();\n\n  if (!ship) {\n    return next(new AppError('Page does not exist. Please try again.', 404));\n  }\n\n  res.status(200).render('ship', {\n    title: `${ship.shipName} Reviews`,\n    ship,\n    allShips,\n    reviewCount,\n  });\n});\nconst cruiseLineInfo = await Ship.find({ cruiseLine: ship.cruiseLine })",
  "#include\"stdafx.h\"\n\n#include<iostream>\n\n\n\nusing namespace std;\n\n\n\nunsigned char s_Box[256] = \n\n{  \n\n  0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,  \n\n  0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,  \n\n  0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,  \n\n  0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,  \n\n  0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,  \n\n  0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,  \n\n  0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,  \n\n  0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,  \n\n  0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,  \n\n  0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,  \n\n  0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,  \n\n  0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,  \n\n  0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,  \n\n  0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,  \n\n  0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,  \n\n  0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16  \n\n};  \n\n\n\nvoid KeyExpansion() {}\n\nvoid SubBytes(unsigned char* state)\n\n{\n\n    for(int i=0; i<16; i++)\n\n        state[i] = s_Box[state[i]];\n\n}\n\nvoid ShiftRows(unsigned char* state) \n\n{\n\n    unsigned char tmp[16];\n\n\n\n    tmp[0] = state[0];\n\n    tmp[1] = state[5];\n\n    tmp[2] = state[10];\n\n    tmp[3] = state[15];\n\n\n\n    tmp[4] = state[4];\n\n    tmp[5] = state[9];\n\n    tmp[6] = state[14];\n\n    tmp[7] = state[3];\n\n\n\n    tmp[8] = state[8];\n\n    tmp[9] = state[13];\n\n    tmp[10] = state[2];\n\n    tmp[11] = state[7];\n\n\n\n    tmp[12] = state[12];\n\n    tmp[13] = state[1];\n\n    tmp[14] = state[6];\n\n    tmp[15] = state[11];\n\n\n\n    for(int i=0; i<16; i++)\n\n        state[i] = tmp[i];\n\n}\n\nvoid MixColumns()\n\n{\n\n\n\n\n\n}\n\nvoid AddRoundKey(unsigned char* state, unsigned char* roundKey) \n\n{\n\n    for(int i=0; i<16; i++)\n\n        state[i] ^= roundKey[i];\n\n}\n\n\n\n\n\nvoid AES_Encrypt(unsigned char* message, unsigned char* key)\n\n{\n\n    unsigned char state[16];\n\n    for(int i=0; i<16; i++)\n\n   state[i]=message[i];\n\n\n\n\n\n    int numberofRound = 1;\n\n    KeyExpansion();\n\n    AddRoundKey(state, key);\n\n\n\n    for(int i=0; i<numberofRound; i++)\n\n    {\n\n        SubBytes(state);\n\n        ShiftRows(state);\n\n        MixColumns();\n\n        AddRoundKey(state, key);\n\n    }\n\n    //final round \n\n\n\nSubBytes(state);\n\nShiftRows(state);\n\nAddRoundKey(state, key);\n\n\n\n}\n\n\n\n\n\nint main()\n\n{\n\n    unsigned char message[]=\"this is a message we will encrypyt for AES!\";\n\n    unsigned char key[16] = {\n\n             1, 2, 3, 4,\n\n                 5, 6, 7, 8,\n\n                 9, 10, 11, 12,\n\n                 13, 14, 15, 16,\n\n            };\n\n    AES_Encrypt(message, key);\n\n\n\n    return 0;\n\n}",
  "#include <stdio.h>\n#include <stdlib.h>\n#include \"SDL2/SDL.h\"\nint main(int c,char **v)\n{\n    printf(\"Hello world!\\n\");\n\n    /*as you see i did nothing but importing sdl2. And i did fix the compiler and the linker sittings*/\n\n\n\n}",
  "New Measure = \n    CALCULATE (\n        SUM ( FACT_PriceDetails[Sales Price] ),\n        FILTER ( DIM_Product_Type, DIM_Product_Type[Product Category] = \"High\" )\n    ) * 1.5",
  "Require Import Coq.Arith.PeanoNat.\nRequire Import Coq.Bool.Bool.\nRequire Import Coq.Logic.Eqdep_dec.\n\nRecord Z_3 : Type := Z3\n{\n  n :> nat;\n  proof : (Nat.ltb n 3) = true\n}.\n\nProposition lt_0_3 : (0 <? 3) = true.\nProof.\n  simpl. reflexivity.\nQed.\n\nDefinition z3_0 : Z_3 := (Z3 0 lt_0_3).\n\nProposition lt_1_3 : (1 <? 3) = true.\nProof.\n  reflexivity.\nQed.\n\nDefinition z3_1 : Z_3 := (Z3 1 lt_1_3).\n\nProposition lt_2_3 : (2 <? 3) = true.\nProof.\n  reflexivity.\nQed.\n\nDefinition z3_2 : Z_3 := (Z3 2 lt_2_3).\n\nProposition three_ne_0 : 3 <> 0.\nProof.\n  discriminate.\nQed.\n\nLemma mod_upper_bound_bool : forall (a b : nat), b <> O -> (a mod b <? b) = true.\nProof.\n  intros a b H. apply (Nat.mod_upper_bound a b) in H. case Nat.ltb_spec0.\n  - reflexivity.\n  - intros Hcontr. contradiction.\nQed.\n\nDefinition Z3_op (x y: Z_3) : Z_3 :=\n  let a := (x + y) mod 3 in\n  Z3 a (mod_upper_bound_bool _ 3 three_ne_0).\n\nLemma Z3_eq n m p q : n = m -> Z3 n p = Z3 m q.\nProof.\n  intros H. revert p q. rewrite H. clear H. intros. apply f_equal. apply UIP_dec. apply bool_dec.\nQed.\n\nProposition Z3_left_id' : forall x: Z_3, (Z3_op z3_0 x) = x.\nProof.\n  intro. unfold Z3_op. destruct x as [n proof]. apply Z3_eq.\n1 subgoal (ID 46)\n  \n  n : nat\n  proof : (n <? 3) = true\n  ============================\n  (z3_0 + {| n := n; proof := proof |}) mod 3 = n\nNat.ltb_spec0\n     : forall x y : nat, reflect (x < y) (x <? y)\n\nNat.mod_small: forall a b : nat, a < b -> a mod b = a",
  "<div>\n  <div style=\"display: inline-block;\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" style=\"display: block;\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z\" />\n    </svg>\n  </div>\n  <span style=\"display: inline-block;\"> Some Text</span>\n</div>",
  "class ListOperations:\n    def list_copy(l):\n        return [x for x in l]\n\n    print(list_copy([\"What\",\"A\", \"List\"]))\nimport unittest\nfrom basicfunction import ListOperations\n\nclass TestListOperations(unittest.TestCase):\n\n    def test_1(self):\n        ListOperations = ListOperations()\n        self.assertEqual(ListOperations.list_copy([\"This\", \"Is\", \"Just\", \"A\", \"List\"]), [\"This\", \"Is\", \"Just\", \"A\", \"List\"])\n\n    def test_2(self):\n        self.assertTrue(True)\n\nif __name__ == '__main__':\n    unittest.main()\nE.\n======================================================================\nERROR: test_1 (__main__.TestListOperations)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:/path/basicfunction.ut.py\", line 8, in test_1\n    ListOperations = ListOperations()\nUnboundLocalError: local variable 'ListOperations' referenced before assignment\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (errors=1)\n['What', 'A', 'List']\nlop = ListOperations()\nintersect1 = [\"Pikachu\", \"Evolves\", \"Into\", \"Raichu\"]\nintersect2 = [\"Raichu\", \"Does\", \"Not\", \"Evolve\", \"Into\", \"Anything\"]\nprint(lop.list_intersect(intersect1, intersect2))",
  "BGroup = new FormGroup({\n  test: new FormControl(null, [Validators.required, Validators.pattern(\"[0-9]*$\")])\n});\n11 OR 11.30 OR 9 OR 9.40 OR 11.05 OR 16 OR 11.80 ......",
  "import * as aedes from 'aedes';\nimport * as net from 'net';\n\nexport class Broker {\n\n    aedes: aedes.Aedes;\n    broker: net.Server;\n    port: number;\n\n    constructor(port: number){\n        this.aedes = aedes();\n        this.broker = net.createServer(this.aedes.handle);\n        this.port = port;\n        this.broker.listen(this.port, () => {\n            console.log('MQTT is listening.');\n        });\n    }\n    \n    /** \n     * This is a callback register function\n     *\n     * Callback function must have a signature of type : function(topic: string, payload: string)\n     **/\n    onMsgReceived(callback: {(topic: string, payload: string): void}){\n        this.aedes.on('publish', (packet, client) => {\n            if (packet.cmd != 'publish') return;\n            callback(packet.topic, packet.payload.toString());\n        });\n    }\n\n}export Test {\n    someVar: string;\n    \n    constructor(){ }\n    \n    onMsgReceivedCallback(topic: string, payload: string){\n        console.log('Hey, i\\'m printed from the test class');\n        console.log('And this is some var : ' + this.someVar);\n    }\n}import { Broker } from './broker.ts'\nimport { Test } from './test.ts'\n\nconst broker = new Broker(1883);\nconst test   = new Test();\n\n\nbroker.onMsgReceived(test.onMsgReceivedCallback);",
  "`<?PHP\n\n namespace App\\Http\\Middleware;\n\n use Closure;\n\n class HandleCors\n {\n  /**\n  * Handle an incoming request.\n  *\n  * @param  \\Illuminate\\Http\\Request  $request\n  * @param  \\Closure  $next\n  * @return mixed\n  */\n public function handle($request, Closure $next)\n {\n    $allowedOrigins = ['http://localhost:5555'];\n    $origin = $request->server('HTTP_ORIGIN');\n\n    if (in_array($origin, $allowedOrigins)) {\n        return $next($request)\n            ->header('Access-Control-Allow-Credentials', 'true')\n            ->header('Access-Control-Allow-Origin', $origin)\n            ->header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')\n            ->header('Access-Control-Allow-Headers', 'Content-Type, Cache-Control'); //in case if you \n    want all (*)\n    }\n\n    return $next($request);\n }\n }`",
  "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
  "[\n   {\n      \"name\":\"Corso1\",\n      \"description\":\"Descrizione\",\n      \"own_place_teaching\":true,\n      \"own_place_teaching_rate\":\"50\",\n      \"own_place_teaching_duration\":\"60\",\n      \"home_teaching\":true,\n      \"home_teaching_rate\":\"70\",\n      \"home_teaching_duration\":\"60\",\n      \"online_teaching\":false,\n      \"online_teaching_rate\":\"\",\n      \"online_teaching_duration\":\"\"\n   }\n]",
  "class Customer(models.Model):\n    name = models.CharField(max_length=200, null= True)\n    email =  models.CharField(max_length=20, null=True)\n    phone = models.CharField(max_length=20, null=True)\n    date_created= models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Tag(models.Model):\n    name= models.CharField(max_length=200, null=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    CATEGORY=(\n         ('Indoor', 'Indoor'),\n         ('Outdoor', 'Outdoor'),\n\n            )\n\n    name= models.CharField(max_length=200, null=True)\n    price= models.FloatField(null=True)\n    category=models.CharField(max_length=200,null=True, choices=CATEGORY)\n    description= models.CharField(max_length=200,null=True, blank= True)\n    date_created=models.DateTimeField(auto_now_add=True, null=True)\n    tags= models.ManyToManyField(Tag)\n\n    def __str__(self):\n        return self.name\n\n\nclass Order(models.Model):\n    STATUS =(\n         ('Pending', 'Pending'),\n         ('Out of delivery', 'Out of delivery'),\n         ('Delivered', 'Delivered'),\n    )\n    status= models.CharField(max_length=200, null=True,choices= STATUS)\n    date_created=models.DateTimeField(auto_now_add=True, null=True)\n    customer = models.ForeignKey(Customer, null= True, on_delete= models.SET_NULL, related_name='orders')\n    product = models.ForeignKey(Product, null= True, on_delete= models.SET_NULL, related_name='orders')\n@api_view(['GET'])\ndef orderList(request):\n    orders = Order.objects.all()\n    serializer = OrderSerializer(orders, many=True)\n    return Response(serializer.data)\n\n@api_view(['POST'])\ndef orderCreate(request):\n    serializer = OrderSerializer(data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n    return Response(serializer.data)\n\n@api_view(['GET'])\ndef customerList(request):\n    customers = Customer.objects.values_list('name', flat=True).distinct()\n    serializer = CustomerSerializer(customers, many=True)\n    return Response(serializer.data)\n\n\n@api_view(['GET'])\ndef customerDetail(request, pk):\n    customers = Customer.objects.get(id=pk)\n    # orders = customers.order_set.all()\n    serializer = CustomerWithProductsSerializer(customers, many=False)\n\n    return Response(serializer.data)",
  "import React, { useEffect } from \"react\"\nimport { lazyLoadImages } from \"../../functions/lazyLoadImages\" \n\nconst Newsletter = () => {\n\n    useEffect(() => {\n        lazyLoadImages()\n    }, []) // I tried omitting the second arg as well\n    \n    return ( \n        <section id={\"newsletter\"} className=\"lazy\">\n            {/* {lazyLoadImages()} I also tried running the function inside the render method! */}\n            <h2>Newsletter</h2>\n            <div>\n                {/* other content */}\n            </div>\n        </section>\n)}\n\nexport default Newsletter\n// src/functions/lazyLoadImages.js\n\n// this function is from this codepen: https://codepen.io/imagekit_io/pen/RBXVrW\n// I don't believe the details of this function are pertinent to this question but I'm including it anyway\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  var lazyloadImages;    \n\n  alert('DOM content loaded'); // attempt to get some output from the function\n\n  if (\"IntersectionObserver\" in window) {\n    lazyloadImages = document.querySelectorAll(\".lazy\");\n    var imageObserver = new IntersectionObserver(function(entries, observer) {\n      entries.forEach(function(entry) {\n        if (entry.isIntersecting) {\n          var image = entry.target;\n          image.classList.remove(\"lazy\");\n          imageObserver.unobserve(image);\n        }\n      });\n    });\n\n    lazyloadImages.forEach(function(image) {\n      imageObserver.observe(image);\n    });\n  } else {  \n    var lazyloadThrottleTimeout;\n    lazyloadImages = document.querySelectorAll(\".lazy\");\n    \n    function lazyload () {\n      if(lazyloadThrottleTimeout) {\n        clearTimeout(lazyloadThrottleTimeout);\n      }    \n\n      lazyloadThrottleTimeout = setTimeout(function() {\n        var scrollTop = window.pageYOffset;\n        lazyloadImages.forEach(function(img) {\n            if(img.offsetTop < (window.innerHeight + scrollTop)) {\n              img.src = img.dataset.src;\n              img.classList.remove('lazy');\n            }\n        });\n        if(lazyloadImages.length == 0) { \n          document.removeEventListener(\"scroll\", lazyload);\n          window.removeEventListener(\"resize\", lazyload);\n          window.removeEventListener(\"orientationChange\", lazyload);\n        }\n      }, 20);\n    }\n\n    document.addEventListener(\"scroll\", lazyload);\n    window.addEventListener(\"resize\", lazyload);\n    window.addEventListener(\"orientationChange\", lazyload);\n  }\n\n  alert('DOM content loaded'); // attempt to get some output from the function\n\n})",
  "[ { \"id\": \"1\", \"name\": \"A\", \"businessArea\": [ \"Accounting\" ], \"Designation\": [ \"L2\" ], \"Location\":\"NY\" }, \n{ \"id\": \"2\", \"name\": \"B\", \"businessArea\": [ \"Engineering\" ], \"Role\": [ \"Tester\",\"Developer\" ], \"Designation\": [ \"L1\" ],\"Location\":\"CA\" },\n { \"id\": \"3\", \"name\": \"C\", \"businessArea\": [ \"Engineering\" ], \"Role\": [ \"Developer\" ], \"Designation\": [ \"L1\" ],\"Location\":\"NY\" }]\ndef get_set(d,field):\n    return {d[field]} if isinstance(d[field], str) else set(d[field])\n    \n# we use this to filter\ndef validate(d):\n    if 'Role' in d or `businessArea` in d or `Designation` in d or `Location` in d :\n        return get_set(d,'Role').intersection({'Developer','Tester'}) and \\\n               get_set(d,'businessArea').intersection({'Engineering'}) and \\\n               get_set(d,'Designation').intersection({'L1'}) and \\\n               get_set(d,'Location').intersection({'NY'})\n\nresult = [d for d in test if validate(d)]",
  "[{\n  \"status\": \"approved\",\n  \"notificationSent\": true,\n  \"_id\": \"5f7ab6fd5d7c3658809d1d2d\",\n  \"slot\": \"5f7ab6c85d7c3658809d1d2c\",\n  \"student\": \"5f772aa8aa691d64b4999812\",\n  \"teacher\": \"5f772abfaa691d64b4999814\",\n  \"location\": \"zoom\",\n  \"cost\": 115\n  \"createdAt\": \"2020-10-05T06:02:37.241Z\",\n  \"updatedAt\": \"2020-10-05T06:02:50.339Z\",\n  \"decisionTime\": \"2020-10-05T06:02:41.218Z\"\n}]\n[{\n  \"_id\": \"14-10-2020\",\n  \"totalAppointments\": 2,\n  \"totalCost\": 230,\n  \"totalStudents\": 2\n},{\n  \"_id\": \"15-10-2020\",\n  \"appointments\": 4,\n  \"totalCost\": 470,\n  \"totalStudents\": 2\n}\n]"
]
